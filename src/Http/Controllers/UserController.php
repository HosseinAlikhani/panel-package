<?php

namespace D3CR33\Panel\Http\Controllers;

use D3CR33\Auth\Base\Model\User;
use D3CR33\Panel\Base\BaseEntity;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

/**
 * Class UserController
 * @package D3CR33\Panel\Http\Controllers
 */
class UserController extends BaseEntity
{
    /**
     * UserController constructor.
     *
     * @param  User  $user
     */
    public function __construct(User $user, Request $request)
    {
        $this->model   = $user;
        $this->request = $request;
    }

    /**
     * return list of users
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function getUsers()
    {
        $users = $this->findAll();
        return view('Panel::user.list', compact(['users']));
    }

    /**
     * return on user
     *
     * @param $id
     *
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function getUser($id)
    {
        $user = $this->findOne($id);

        return view('Panel::user.update', compact(['user']));
    }

    /**
     * return user create blade
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function getPostUser()
    {
        return view('Panel::user.create');
    }

    /**
     * create new user record
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Illuminate\Http\Response
     */
    public function postUser()
    {
        if ($this->validator($this->postvariable())->fails()) {
            return response($this->validator($this->postvariable())->errors()->first(), 422);
        }

        $user = $this->create();
        if ($user){
            $this->assignRole($user->id);
            return response(__('Panel-Lang::trans.message.createok'), 200);
        }else{
            return response(__('Panel-Lang::trans.message.createno'), 500);
        }
    }

    /**
     * create new user
     *
     * @param $id
     *
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Illuminate\Http\Response
     */
    public function patchUser($id)
    {
        if ($this->validator($this->patchVariable())->fails()) {
            return response($this->validator($this->patchVariable())->errors()->first(), 422);
        }
        $this->assignRole($id);
        return $this->update($id) ?
            response(__('Panel-Lang::trans.message.updateok'), 200) :
            response(__('Panel-Lang::trans.message.updateno'), 500);
    }

    /**
     * delete user record
     *
     * @param $id
     *
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Illuminate\Http\Response
     */
    public function deleteUser($id)
    {
        return $this->delete($id) ?
            response(__('Panel-Lang::trans.message.deleteok'), 200) :
            response(__('Panel-Lang::trans.message.deleteno'), 500);
    }

    /**
     * create new user
     *
     * @param $param
     *
     * @return mixed
     */
    public function create($param = null)
    {
        return parent::create($this->postvariable($this->request->all())); // TODO: Change the autogenerated stub
    }

    /**
     * update user param
     *
     * @param $id
     * @param $param
     *
     * @return mixed
     */
    public function update($id, $param = null)
    {
        return parent::update($id, $this->patchvariable($this->request->all())); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function patchvariable()
    {
        return [
            'fname' => $this->request->fname,
            'lname' => $this->request->lname,
            'email' => $this->request->email
        ];
    }

    /**
     * @return array
     */
    public function postvariable()
    {
        return [
            'fname'    => $this->request->fname,
            'lname'    => $this->request->lname,
            'email'    => $this->request->email,
            'password' => Hash::make($this->request->password),
        ];
    }

    /**
     * @return \Illuminate\Contracts\Validation\Validator
     */
    public function validator($variable)
    {
        foreach (array_keys($variable) as $key) {
            $rule[$key] = 'required';
            if ($key === 'password') {
                $rule[$key] = 'required|confirmed';
            }
        }

        return Validator::make($this->request->all(), $rule, $this->message(), $this->attributes());
    }

    /**
     * @return array
     */
    public function message()
    {
        return [
            'required'  => __('Auth-Lang::validation.required'),
            'confirmed' => __('Auth-Lang::validation.confirmed'),
        ];
    }

    /**
     * customize validation attributes
     * @return array
     */
    public function attributes()
    {
        return [
            'fname'    => __('Auth-Lang::validation.attributes.fname'),
            'lname'    => __('Auth-Lang::validation.attributes.lname'),
            'email'    => __('Auth-Lang::validation.attributes.email'),
            'password' => __('Auth-Lang::validation.attributes.password'),
        ];
    }

    public function explodeRole()
    {
        return explode(',',$this->request->role);
    }

    public function assignRole($userid)
    {
        return $this->findOne($userid)->syncRoles($this->explodeRole());
    }
}
